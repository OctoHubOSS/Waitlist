generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BaseModel {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model User {
  id                String                     @id @default(cuid())
  name              String?
  displayName       String?                    @unique
  email             String?                    @unique
  emailVerified     DateTime?
  password          String?                    @db.Text
  image             String?
  bio               String?                    @db.Text
  website           String?
  location          String?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  deletedAt         DateTime?
  lastLoginAt       DateTime?
  lastActiveAt      DateTime?
  status            UserStatus                 @default(OFFLINE)
  statusMessage     String?
  githubId          String?                    @unique
  githubUsername    String?                    @unique
  githubDisplayName String?
  preferences       Json?
  role              UserRole                   @default(USER)
  accounts          Account[]
  apiTokens         ApiToken[]                 @relation("UserApiTokens")
  auditLogsAsActor  AuditLog[]                 @relation("AuditLogActor")
  auditLogs         AuditLog[]                 @relation("UserAuditLogs")
  contributedRepos  Contribution[]             @relation("UserContributions")
  authoredIssues    Issue[]                    @relation("IssueAuthor")
  Issue             Issue[]
  issueAssignments  IssueAssignee[]
  issueComments     IssueComment[]
  milestones        Milestone[]
  orgMemberships    OrgMembership[]
  ownedOrgs         Organization[]             @relation("OrganizationOwner")
  packages          Package[]
  pullRequests      PullRequest[]
  prAssignments     PullRequestAssignee[]
  prComments        PullRequestComment[]
  prReviews         PullRequestReview[]
  prReviewComments  PullRequestReviewComment[]
  prReviewers       PullRequestReviewer[]
  reactions         Reaction[]
  authoredReleases  Release[]                  @relation("ReleaseAuthor")
  Release           Release[]
  linkedRepos       Repository[]               @relation("LinkedRepositories")
  repositories      Repository[]               @relation("UserRepositories")
  repoViews         RepositoryView[]
  searchClicks      SearchClick[]
  searches          SearchQuery[]
  SearchSession     SearchSession[]
  sessions          Session[]
  stars             Star[]
  authoredTags      Tag[]                      @relation("TagAuthor")
  Tag               Tag[]
  teamMemberships   TeamMembership[]
  trending          TrendingEntity[]
  activities        UserActivity[]
  presence          UserPresence[]
  wikiPages         WikiPage[]
  wikiRevisions     WikiRevision[]

  @@index([email, status])
  @@index([githubUsername, githubId])
  @@index([lastActiveAt, status])
  @@index([deletedAt])
  @@fulltext([name, displayName, bio])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id            String           @id @default(cuid())
  name          String           @unique
  displayName   String?
  description   String?          @db.Text
  avatarUrl     String?
  website       String?
  location      String?
  email         String?
  isPublic      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  ownerId       String
  githubOrgName String?          @unique
  githubOrgId   String?          @unique
  apiTokens     ApiToken[]       @relation("OrgApiTokens")
  auditLogs     AuditLog[]       @relation("OrganizationAuditLogs")
  members       OrgMembership[]
  owner         User             @relation("OrganizationOwner", fields: [ownerId], references: [id])
  packages      Package[]
  repositories  Repository[]     @relation("OrganizationRepositories")
  teams         Team[]
  trending      TrendingEntity[]
  webhooks      Webhook[]

  @@index([name])
  @@index([ownerId], map: "Organization_ownerId_fkey")
}

model OrgMembership {
  id             String       @id @default(cuid())
  role           OrgRole      @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId], map: "OrgMembership_organizationId_fkey")
}

model Team {
  id             String                 @id @default(cuid())
  name           String
  description    String?                @db.Text
  isPrivate      Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now())
  organizationId String
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMembership[]
  repoAccess     TeamRepositoryAccess[]

  @@unique([organizationId, name])
}

model TeamMembership {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId], map: "TeamMembership_teamId_fkey")
}

model Repository {
  id                String                 @id @default(cuid())
  name              String
  description       String?                @db.Text
  isPrivate         Boolean                @default(false)
  defaultBranch     String                 @default("main")
  language          String?
  forkCount         Int                    @default(0)
  starCount         Int                    @default(0)
  size              Int                    @default(0)
  watcherCount      Int                    @default(0)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  lastPushedAt      DateTime?
  deletedAt         DateTime?
  source            RepoSource             @default(OCTOFLOW)
  ownerId           String?
  orgId             String?
  isGithubLinked    Boolean                @default(false)
  githubRepoId      String?                @unique
  githubFullName    String?
  githubOwnerId     String?
  githubOwnerType   String?
  linkedByUser      String?
  lastSyncedAt      DateTime?
  auditLogs         AuditLog[]             @relation("RepositoryAuditLogs")
  branchProtections BranchProtection[]
  contributors      Contribution[]         @relation("RepoContributions")
  issues            Issue[]                @relation("RepositoryIssues")
  labels            Label[]                @relation("RepositoryLabels")
  milestones        Milestone[]
  packages          Package[]
  pullRequests      PullRequest[]
  releases          Release[]              @relation("RepositoryReleases")
  linkedBy          User?                  @relation("LinkedRepositories", fields: [linkedByUser], references: [id])
  organization      Organization?          @relation("OrganizationRepositories", fields: [orgId], references: [id])
  owner             User?                  @relation("UserRepositories", fields: [ownerId], references: [id])
  settings          RepositorySettings?
  stats             RepositoryStats?
  views             RepositoryView[]
  searchClicks      SearchClick[]
  searchImpressions SearchImpression[]
  stars             Star[]
  tags              Tag[]                  @relation("RepositoryTags")
  teams             TeamRepositoryAccess[]
  trending          TrendingEntity[]
  webhooks          Webhook[]
  wikiPages         WikiPage[]
  workflows         Workflow[]
  topics            Topic[]                @relation("RepositoryToTopic")

  @@unique([orgId, name])
  @@unique([ownerId, name])
  @@index([name, language, isPrivate])
  @@index([starCount, forkCount])
  @@index([isGithubLinked, lastSyncedAt])
  @@index([githubOwnerId, githubOwnerType])
  @@index([deletedAt])
  @@index([linkedByUser], map: "Repository_linkedByUser_fkey")
  @@fulltext([name, description])
}

model Topic {
  id                String             @id @default(cuid())
  name              String             @unique
  searchClicks      SearchClick[]
  searchImpressions SearchImpression[]
  repositories      Repository[]       @relation("RepositoryToTopic")

  @@index([name])
}

model Star {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  userId       String
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([repositoryId], map: "Star_repositoryId_fkey")
}

model TeamRepositoryAccess {
  id           String         @id @default(cuid())
  permission   RepoPermission @default(READ)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  teamId       String
  repositoryId String
  repository   Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  team         Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, repositoryId])
  @@index([repositoryId], map: "TeamRepositoryAccess_repositoryId_fkey")
}

model Contribution {
  id           String      @id @default(cuid())
  role         ContribRole @default(CONTRIBUTOR)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  userId       String
  repositoryId String
  repository   Repository  @relation("RepoContributions", fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User        @relation("UserContributions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@index([repositoryId], map: "Contribution_repositoryId_fkey")
}

model SearchQuery {
  id           String             @id @default(cuid())
  query        String             @db.Text
  filters      Json?
  resultsCount Int
  sourceIp     String?
  userAgent    String?            @db.Text
  createdAt    DateTime           @default(now())
  userId       String?
  clicks       SearchClick[]
  impressions  SearchImpression[]
  user         User?              @relation(fields: [userId], references: [id])

  @@index([query(length: 256)])
  @@index([userId])
  @@index([createdAt(sort: Desc)])
}

model SearchImpression {
  id           String      @id @default(cuid())
  position     Int
  createdAt    DateTime    @default(now())
  searchId     String
  repositoryId String?
  topicId      String?
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  search       SearchQuery @relation(fields: [searchId], references: [id], onDelete: Cascade)
  topic        Topic?      @relation(fields: [topicId], references: [id])

  @@index([searchId, position])
  @@index([repositoryId, createdAt])
  @@index([topicId, createdAt])
}

model SearchClick {
  id           String      @id @default(cuid())
  position     Int
  createdAt    DateTime    @default(now())
  searchId     String
  userId       String?
  repositoryId String?
  topicId      String?
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  search       SearchQuery @relation(fields: [searchId], references: [id], onDelete: Cascade)
  topic        Topic?      @relation(fields: [topicId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])

  @@index([searchId])
  @@index([userId])
  @@index([repositoryId])
  @@index([topicId])
  @@index([createdAt])
}

model SearchTrending {
  id           String   @id @default(cuid())
  term         String   @unique
  count        Int      @default(0)
  lastSearched DateTime @default(now())
  dailyCount   Int      @default(0)
  weeklyCount  Int      @default(0)
  monthlyCount Int      @default(0)
  dailyReset   DateTime @default(now())
  weeklyReset  DateTime @default(now())
  monthlyReset DateTime @default(now())

  @@index([term])
  @@index([count])
  @@index([dailyCount])
  @@index([weeklyCount])
  @@index([monthlyCount])
}

model RepositoryStats {
  id               String     @id @default(cuid())
  repositoryId     String     @unique
  viewCount        Int        @default(0)
  uniqueViewers    Int        @default(0)
  impressionCount  Int        @default(0)
  clickCount       Int        @default(0)
  clickThroughRate Float      @default(0)
  dailyViews       Int        @default(0)
  weeklyViews      Int        @default(0)
  monthlyViews     Int        @default(0)
  lastUpdated      DateTime   @default(now())
  dailyReset       DateTime   @default(now())
  weeklyReset      DateTime   @default(now())
  monthlyReset     DateTime   @default(now())
  repository       Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([lastUpdated])
  @@index([dailyReset])
  @@index([weeklyReset])
  @@index([monthlyReset])
}

model RepositoryView {
  id           String     @id @default(cuid())
  repositoryId String
  userId       String?
  sourceIp     String?
  userAgent    String?    @db.Text
  referrer     String?    @db.Text
  createdAt    DateTime   @default(now())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id])

  @@index([repositoryId])
  @@index([userId])
  @@index([createdAt])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  metadata  Json?
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([action])
}

model UserPresence {
  id        String     @id @default(cuid())
  userId    String
  status    UserStatus
  startedAt DateTime   @default(now())
  endedAt   DateTime?
  duration  Int?
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startedAt])
}

model Release {
  id              String         @id @default(cuid())
  tagName         String
  name            String?
  body            String?        @db.Text
  isDraft         Boolean        @default(false)
  isPrerelease    Boolean        @default(false)
  createdAt       DateTime       @default(now())
  publishedAt     DateTime?
  downloadCount   Int            @default(0)
  zipballUrl      String?
  tarballUrl      String?
  repositoryId    String
  authorId        String
  githubReleaseId String?        @unique
  lastSyncedAt    DateTime?
  userId          String?
  author          User           @relation("ReleaseAuthor", fields: [authorId], references: [id], onDelete: Cascade, map: "Release_author_fkey")
  repository      Repository     @relation("RepositoryReleases", fields: [repositoryId], references: [id], map: "Release_repository_fkey")
  User            User?          @relation(fields: [userId], references: [id])
  assets          ReleaseAsset[]

  @@index([repositoryId])
  @@index([tagName])
  @@index([createdAt])
  @@index([authorId], map: "Release_author_fkey")
  @@index([userId], map: "Release_userId_fkey")
}

model ReleaseAsset {
  id            String   @id @default(cuid())
  name          String
  label         String?
  contentType   String?
  size          Int      @default(0)
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  storagePath   String
  storageUrl    String?
  releaseId     String
  githubAssetId String?  @unique
  release       Release  @relation(fields: [releaseId], references: [id], onDelete: Cascade)

  @@index([releaseId])
}

model Tag {
  id           String     @id @default(cuid())
  name         String
  commitHash   String
  message      String?    @db.Text
  createdAt    DateTime   @default(now())
  repositoryId String
  authorId     String
  githubTagId  String?    @unique
  userId       String?
  author       User       @relation("TagAuthor", fields: [authorId], references: [id], onDelete: Cascade, map: "Tag_author_fkey")
  repository   Repository @relation("RepositoryTags", fields: [repositoryId], references: [id], onDelete: Cascade, map: "Tag_repository_fkey")
  User         User?      @relation(fields: [userId], references: [id])

  @@unique([repositoryId, name])
  @@index([repositoryId])
  @@index([authorId])
  @@index([userId], map: "Tag_userId_fkey")
}

model Issue {
  id            String          @id @default(cuid())
  title         String
  body          String?         @db.Text
  number        Int
  state         IssueState      @default(OPEN)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  closedAt      DateTime?
  repositoryId  String
  authorId      String
  milestoneId   String?
  githubIssueId String?         @unique
  lastSyncedAt  DateTime?
  userId        String?
  author        User            @relation("IssueAuthor", fields: [authorId], references: [id])
  milestone     Milestone?      @relation(fields: [milestoneId], references: [id])
  repository    Repository      @relation("RepositoryIssues", fields: [repositoryId], references: [id], onDelete: Cascade)
  User          User?           @relation(fields: [userId], references: [id])
  assignees     IssueAssignee[]
  comments      IssueComment[]
  labels        IssueLabel[]
  pullRequest   PullRequest?    @relation("IssuePR")
  reactions     Reaction[]

  @@unique([repositoryId, number])
  @@index([repositoryId])
  @@index([state])
  @@index([authorId])
  @@index([milestoneId], map: "Issue_milestoneId_fkey")
  @@index([userId], map: "Issue_userId_fkey")
}

model IssueAssignee {
  id      String @id @default(cuid())
  issueId String
  userId  String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([issueId, userId])
  @@index([userId], map: "IssueAssignee_userId_fkey")
}

model IssueLabel {
  id      String @id @default(cuid())
  issueId String
  labelId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([issueId, labelId])
  @@index([labelId], map: "IssueLabel_labelId_fkey")
}

model Label {
  id            String             @id @default(cuid())
  name          String
  description   String?
  color         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  repositoryId  String
  githubLabelId String?            @unique
  issues        IssueLabel[]
  repository    Repository         @relation("RepositoryLabels", fields: [repositoryId], references: [id], onDelete: Cascade)
  pullRequests  PullRequestLabel[]

  @@unique([repositoryId, name])
  @@index([repositoryId])
}

model IssueComment {
  id              String     @id @default(cuid())
  body            String     @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  issueId         String
  authorId        String
  githubCommentId String?    @unique
  author          User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  issue           Issue      @relation(fields: [issueId], references: [id], onDelete: Cascade)
  reactions       Reaction[]

  @@index([issueId])
  @@index([authorId])
}

model PullRequest {
  id                  String                @id @default(cuid())
  title               String
  body                String?               @db.Text
  number              Int
  state               PullRequestState      @default(OPEN)
  isDraft             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  closedAt            DateTime?
  mergedAt            DateTime?
  headBranch          String
  baseBranch          String
  mergeable           Boolean?
  merged              Boolean               @default(false)
  repositoryId        String
  authorId            String
  issueId             String?               @unique
  milestoneId         String?
  githubPullRequestId String?               @unique
  lastSyncedAt        DateTime?
  author              User                  @relation(fields: [authorId], references: [id])
  issue               Issue?                @relation("IssuePR", fields: [issueId], references: [id])
  milestone           Milestone?            @relation(fields: [milestoneId], references: [id])
  repository          Repository            @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  assignees           PullRequestAssignee[]
  comments            PullRequestComment[]
  labels              PullRequestLabel[]
  reviews             PullRequestReview[]
  reviewers           PullRequestReviewer[]
  reactions           Reaction[]

  @@unique([repositoryId, number])
  @@index([repositoryId])
  @@index([state])
  @@index([authorId])
  @@index([milestoneId], map: "PullRequest_milestoneId_fkey")
}

model PullRequestAssignee {
  id            String      @id @default(cuid())
  pullRequestId String
  userId        String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pullRequestId, userId])
  @@index([userId], map: "PullRequestAssignee_userId_fkey")
}

model PullRequestReviewer {
  id            String      @id @default(cuid())
  pullRequestId String
  userId        String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pullRequestId, userId])
  @@index([userId], map: "PullRequestReviewer_userId_fkey")
}

model PullRequestLabel {
  id            String      @id @default(cuid())
  pullRequestId String
  labelId       String
  label         Label       @relation(fields: [labelId], references: [id], onDelete: Cascade)
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

  @@unique([pullRequestId, labelId])
  @@index([labelId], map: "PullRequestLabel_labelId_fkey")
}

model PullRequestComment {
  id              String      @id @default(cuid())
  body            String      @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  pullRequestId   String
  authorId        String
  position        Int?
  path            String?
  commitId        String?
  githubCommentId String?     @unique
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pullRequest     PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  reactions       Reaction[]

  @@index([pullRequestId])
  @@index([authorId])
}

model PullRequestReview {
  id             String                     @id @default(cuid())
  body           String?                    @db.Text
  state          PullRequestReviewState
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  pullRequestId  String
  authorId       String
  githubReviewId String?                    @unique
  author         User                       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pullRequest    PullRequest                @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  comments       PullRequestReviewComment[]

  @@index([pullRequestId])
  @@index([authorId])
}

model PullRequestReviewComment {
  id              String            @id @default(cuid())
  body            String            @db.Text
  position        Int?
  path            String?
  commitId        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reviewId        String
  authorId        String
  githubCommentId String?           @unique
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  review          PullRequestReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reactions       Reaction[]

  @@index([reviewId])
  @@index([authorId])
}

model Milestone {
  id                String         @id @default(cuid())
  title             String
  description       String?        @db.Text
  dueDate           DateTime?
  state             MilestoneState @default(OPEN)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  repositoryId      String
  creatorId         String
  githubMilestoneId String?        @unique
  issues            Issue[]
  creator           User           @relation(fields: [creatorId], references: [id])
  repository        Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  pullRequests      PullRequest[]

  @@unique([repositoryId, title])
  @@index([repositoryId])
  @@index([state])
  @@index([creatorId], map: "Milestone_creatorId_fkey")
}

model Reaction {
  id                String                    @id @default(cuid())
  type              ReactionType
  createdAt         DateTime                  @default(now())
  userId            String
  issueId           String?
  prId              String?
  issueCommentId    String?
  prCommentId       String?
  prReviewCommentId String?
  githubReactionId  String?                   @unique
  issueComment      IssueComment?             @relation(fields: [issueCommentId], references: [id], onDelete: Cascade)
  issue             Issue?                    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  prComment         PullRequestComment?       @relation(fields: [prCommentId], references: [id], onDelete: Cascade)
  pr                PullRequest?              @relation(fields: [prId], references: [id], onDelete: Cascade)
  prReviewComment   PullRequestReviewComment? @relation(fields: [prReviewCommentId], references: [id], onDelete: Cascade)
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([issueId])
  @@index([prId])
  @@index([issueCommentId])
  @@index([prCommentId])
  @@index([prReviewCommentId], map: "Reaction_prReviewCommentId_fkey")
}

model Package {
  id              String            @id @default(cuid())
  name            String
  displayName     String?
  description     String?           @db.Text
  visibility      PackageVisibility @default(PUBLIC)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  repositoryId    String?
  ownerId         String?
  orgId           String?
  packageType     PackageType
  githubPackageId String?           @unique
  organization    Organization?     @relation(fields: [orgId], references: [id])
  owner           User?             @relation(fields: [ownerId], references: [id])
  repository      Repository?       @relation(fields: [repositoryId], references: [id])
  versions        PackageVersion[]

  @@unique([name, packageType, repositoryId])
  @@index([repositoryId])
  @@index([ownerId])
  @@index([orgId])
}

model PackageVersion {
  id              String        @id @default(cuid())
  version         String
  description     String?       @db.Text
  createdAt       DateTime      @default(now())
  publishedAt     DateTime?
  size            Int           @default(0)
  packageId       String
  githubVersionId String?       @unique
  files           PackageFile[]
  package         Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, version])
  @@index([packageId])
}

model PackageFile {
  id          String         @id @default(cuid())
  name        String
  size        Int            @default(0)
  sha256      String?
  contentType String?
  storagePath String
  storageUrl  String?
  versionId   String
  version     PackageVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId])
}

model RepositorySettings {
  id                      String                @id @default(cuid())
  repositoryId            String                @unique
  hasIssues               Boolean               @default(true)
  hasPullRequests         Boolean               @default(true)
  hasWiki                 Boolean               @default(false)
  hasPages                Boolean               @default(false)
  hasProjects             Boolean               @default(false)
  hasDiscussions          Boolean               @default(false)
  hasPackages             Boolean               @default(false)
  hasReleases             Boolean               @default(true)
  allowMergeCommit        Boolean               @default(true)
  allowSquashMerge        Boolean               @default(true)
  allowRebaseMerge        Boolean               @default(true)
  defaultBranchProtection BranchProtectionLevel @default(NONE)
  webhooksEnabled         Boolean               @default(false)
  automationEnabled       Boolean               @default(false)
  analyticsEnabled        Boolean               @default(true)
  repository              Repository            @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

model BranchProtection {
  id                     String        @id @default(cuid())
  repositoryId           String
  branchPattern          String
  requirePullRequest     Boolean       @default(true)
  requiredReviewCount    Int           @default(1)
  dismissStaleReviews    Boolean       @default(false)
  requireCodeOwnerReview Boolean       @default(false)
  requireStatusChecks    Boolean       @default(false)
  requireLinearHistory   Boolean       @default(false)
  allowForcePushes       Boolean       @default(false)
  allowDeletions         Boolean       @default(false)
  repository             Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  statusChecks           StatusCheck[]

  @@unique([repositoryId, branchPattern])
  @@index([repositoryId])
}

model StatusCheck {
  id                 String           @id @default(cuid())
  name               String
  branchProtectionId String
  branchProtection   BranchProtection @relation(fields: [branchProtectionId], references: [id], onDelete: Cascade)

  @@unique([branchProtectionId, name])
}

model Webhook {
  id                    String             @id @default(cuid())
  name                  String?
  url                   String
  contentType           WebhookContentType @default(JSON)
  secret                String?            @db.Text
  active                Boolean            @default(true)
  events                Json
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  lastDeliveryId        String?
  lastDeliverySuccess   Boolean?
  lastDeliveryTimestamp DateTime?
  repositoryId          String?
  orgId                 String?
  githubWebhookId       String?            @unique
  organization          Organization?      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  repository            Repository?        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  deliveries            WebhookDelivery[]

  @@index([repositoryId])
  @@index([orgId])
}

model WebhookDelivery {
  id              String   @id @default(cuid())
  webhookId       String
  guid            String   @unique
  event           String
  requestHeaders  Json
  requestPayload  Json
  responseCode    Int?
  responseHeaders Json?
  responseBody    String?  @db.Text
  success         Boolean
  deliveredAt     DateTime
  webhook         Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([event])
  @@index([deliveredAt])
}

model WikiPage {
  id           String         @id @default(cuid())
  title        String
  content      String         @db.Text
  path         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  repositoryId String
  authorId     String
  author       User           @relation(fields: [authorId], references: [id])
  repository   Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  revisions    WikiRevision[]

  @@unique([repositoryId, path])
  @@index([repositoryId])
  @@index([authorId], map: "WikiPage_authorId_fkey")
}

model WikiRevision {
  id        String   @id @default(cuid())
  content   String   @db.Text
  message   String?
  createdAt DateTime @default(now())
  pageId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  page      WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
  @@index([authorId], map: "WikiRevision_authorId_fkey")
}

model Workflow {
  id           String        @id @default(cuid())
  name         String
  path         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  repositoryId String
  repository   Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  runs         WorkflowRun[]

  @@unique([repositoryId, path])
  @@index([repositoryId])
}

model WorkflowRun {
  id          String              @id @default(cuid())
  runNumber   Int
  status      WorkflowStatus      @default(QUEUED)
  conclusion  WorkflowConclusion?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  headBranch  String
  headSha     String
  triggeredBy String?
  workflowId  String
  jobs        WorkflowJob[]
  workflow    Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, runNumber])
  @@index([workflowId])
  @@index([status])
}

model WorkflowJob {
  id          String              @id @default(cuid())
  name        String
  status      WorkflowStatus      @default(QUEUED)
  conclusion  WorkflowConclusion?
  startedAt   DateTime?
  completedAt DateTime?
  runId       String
  run         WorkflowRun         @relation(fields: [runId], references: [id], onDelete: Cascade)
  steps       WorkflowStep[]

  @@index([runId])
  @@index([status])
}

model WorkflowStep {
  id          String              @id @default(cuid())
  name        String
  status      WorkflowStatus      @default(QUEUED)
  conclusion  WorkflowConclusion?
  number      Int
  startedAt   DateTime?
  completedAt DateTime?
  jobId       String
  output      String?             @db.Text
  logUrl      String?
  job         WorkflowJob         @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model ApiToken {
  id               String          @id @default(cuid())
  name             String
  description      String?         @db.Text
  token            String          @unique
  type             TokenType       @default(BASIC)
  scopes           Json
  expiresAt        DateTime?
  lastUsedAt       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  allowedIps       Json?
  allowedReferrers Json?
  rateLimit        Int?
  rateLimitUsed    Int             @default(0)
  resetAt          DateTime?
  userId           String?
  orgId            String?
  org              Organization?   @relation("OrgApiTokens", fields: [orgId], references: [id], onDelete: Cascade)
  user             User?           @relation("UserApiTokens", fields: [userId], references: [id], onDelete: Cascade)
  usageHistory     ApiTokenUsage[]

  @@index([token])
  @@index([userId])
  @@index([orgId])
  @@index([deletedAt])
  @@index([expiresAt])
  @@index([lastUsedAt])
}

model ApiTokenUsage {
  id        String   @id @default(cuid())
  tokenId   String
  endpoint  String
  method    String
  status    Int
  ipAddress String?
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  token     ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([endpoint])
  @@index([createdAt])
}

model AuditLog {
  id             String        @id @default(cuid())
  action         AuditAction
  category       AuditCategory
  message        String        @db.Text
  details        Json?
  metadata       Json?
  createdAt      DateTime      @default(now())
  actorId        String?
  actorIp        String?
  userAgent      String?       @db.Text
  userId         String?
  repositoryId   String?
  organizationId String?
  actor          User?         @relation("AuditLogActor", fields: [actorId], references: [id])
  organization   Organization? @relation("OrganizationAuditLogs", fields: [organizationId], references: [id])
  repository     Repository?   @relation("RepositoryAuditLogs", fields: [repositoryId], references: [id])
  user           User?         @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([action])
  @@index([category])
  @@index([createdAt])
  @@index([actorId])
  @@index([userId])
  @@index([repositoryId])
  @@index([organizationId])
}

model RateLimit {
  id           String    @id @default(cuid())
  identifier   String
  endpoint     String?
  method       String?
  count        Int       @default(0)
  resetAt      DateTime
  blockedUntil DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([identifier, endpoint, method])
  @@index([identifier])
  @@index([resetAt])
  @@index([blockedUntil])
}

model RateLimitRule {
  id          String   @id @default(cuid())
  endpoint    String?
  method      String?
  limit       Int
  window      Int
  blockFor    Int?
  tokenLimit  Int?
  tokenWindow Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([endpoint, method])
  @@index([endpoint])
}

model PlatformStats {
  id               String      @id @default(cuid())
  timestamp        DateTime    @default(now())
  totalUsers       Int         @default(0)
  activeUsers      Int         @default(0)
  newUsers         Int         @default(0)
  verifiedUsers    Int         @default(0)
  deletedUsers     Int         @default(0)
  totalOrgs        Int         @default(0)
  activeOrgs       Int         @default(0)
  newOrgs          Int         @default(0)
  verifiedOrgs     Int         @default(0)
  deletedOrgs      Int         @default(0)
  totalRepos       Int         @default(0)
  activeRepos      Int         @default(0)
  newRepos         Int         @default(0)
  publicRepos      Int         @default(0)
  privateRepos     Int         @default(0)
  deletedRepos     Int         @default(0)
  totalStars       Int         @default(0)
  totalForks       Int         @default(0)
  totalIssues      Int         @default(0)
  totalPRs         Int         @default(0)
  totalCommits     Int         @default(0)
  totalComments    Int         @default(0)
  totalApiCalls    Int         @default(0)
  uniqueApiUsers   Int         @default(0)
  avgResponseTime  Float       @default(0)
  errorRate        Float       @default(0)
  totalSearches    Int         @default(0)
  uniqueSearchers  Int         @default(0)
  avgSearchTime    Float       @default(0)
  totalStorageUsed BigInt      @default(0)
  totalPackages    Int         @default(0)
  totalReleases    Int         @default(0)
  period           StatsPeriod @default(DAILY)
  startTime        DateTime
  endTime          DateTime

  @@unique([period, startTime])
  @@index([timestamp])
  @@index([period])
}

model TrendingEntity {
  id               String         @id @default(cuid())
  type             TrendingType
  entityId         String
  score            Float
  rank             Int
  period           TrendingPeriod @default(DAILY)
  viewCount        Int            @default(0)
  starCount        Int            @default(0)
  forkCount        Int            @default(0)
  contributorCount Int            @default(0)
  activityScore    Float          @default(0)
  timestamp        DateTime       @default(now())
  startTime        DateTime
  endTime          DateTime
  userId           String?
  repositoryId     String?
  organizationId   String?
  organization     Organization?  @relation(fields: [organizationId], references: [id])
  repository       Repository?    @relation(fields: [repositoryId], references: [id])
  user             User?          @relation(fields: [userId], references: [id])

  @@unique([type, period, entityId, startTime])
  @@index([type, period, rank])
  @@index([score])
  @@index([timestamp])
  @@index([organizationId], map: "TrendingEntity_organizationId_fkey")
  @@index([repositoryId], map: "TrendingEntity_repositoryId_fkey")
  @@index([userId], map: "TrendingEntity_userId_fkey")
}

model SearchAnalytics {
  id                    String      @id @default(cuid())
  timestamp             DateTime    @default(now())
  period                StatsPeriod @default(HOURLY)
  startTime             DateTime
  endTime               DateTime
  totalSearches         Int         @default(0)
  uniqueUsers           Int         @default(0)
  authenticatedSearches Int         @default(0)
  anonymousSearches     Int         @default(0)
  avgResponseTime       Float       @default(0)
  p50ResponseTime       Float       @default(0)
  p90ResponseTime       Float       @default(0)
  p95ResponseTime       Float       @default(0)
  p99ResponseTime       Float       @default(0)
  maxResponseTime       Float       @default(0)
  minResponseTime       Float       @default(0)
  avgResultCount        Float       @default(0)
  zeroResultCount       Int         @default(0)
  clickthroughRate      Float       @default(0)
  bounceRate            Float       @default(0)
  cacheHitRate          Float       @default(0)
  cacheMissRate         Float       @default(0)
  avgCacheLatency       Float       @default(0)
  errorCount            Int         @default(0)
  errorRate             Float       @default(0)
  timeoutCount          Int         @default(0)
  topQueries            Json?
  topFilters            Json?

  @@unique([period, startTime])
  @@index([timestamp])
  @@index([period])
}

model SearchSession {
  id                String               @id @default(cuid())
  timestamp         DateTime             @default(now())
  userId            String?
  sessionId         String?
  sourceIp          String?
  userAgent         String?              @db.Text
  referer           String?
  query             String               @db.Text
  filters           Json?
  page              Int                  @default(1)
  perPage           Int                  @default(20)
  sortBy            String?
  sortDirection     String?
  totalResults      Int
  returnedResults   Int
  executionTimeMs   Int
  cacheHit          Boolean              @default(false)
  errorOccurred     Boolean              @default(false)
  errorMessage      String?              @db.Text
  firstClickTime    Int?
  totalClicks       Int                  @default(0)
  scrollDepth       Int?
  sessionDuration   Int?
  refinements       Int                  @default(0)
  refinementQueries SearchRefinement[]
  user              User?                @relation(fields: [userId], references: [id])
  clicks            SearchSessionClick[]

  @@index([userId])
  @@index([timestamp])
  @@index([query(length: 256)])
  @@index([errorOccurred])
}

model SearchSessionClick {
  id            String        @id @default(cuid())
  timestamp     DateTime      @default(now())
  sessionId     String
  position      Int
  timeToClickMs Int
  resultType    String
  resultId      String
  isRelevant    Boolean?
  dwellTimeMs   Int?
  session       SearchSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
  @@index([resultType, resultId])
}

model SearchRefinement {
  id             String               @id @default(cuid())
  timestamp      DateTime             @default(now())
  sessionId      String
  sequence       Int
  originalQuery  String               @db.Text
  refinedQuery   String               @db.Text
  addedFilters   Json?
  removedFilters Json?
  changeType     SearchRefinementType
  session        SearchSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

enum RepoSource {
  OCTOFLOW
  GITHUB
  GITLAB
  BITBUCKET
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum TeamRole {
  MAINTAINER
  MEMBER
}

enum RepoPermission {
  READ
  WRITE
  ADMIN
}

enum ContribRole {
  OWNER
  MAINTAINER
  CONTRIBUTOR
}

enum UserStatus {
  ONLINE
  IDLE
  DO_NOT_DISTURB
  BUSY
  AWAY
  OFFLINE
  INVISIBLE
}

enum IssueState {
  OPEN
  CLOSED
}

enum PullRequestState {
  OPEN
  CLOSED
  MERGED
}

enum PullRequestReviewState {
  PENDING
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
}

enum MilestoneState {
  OPEN
  CLOSED
}

enum ReactionType {
  THUMBS_UP
  THUMBS_DOWN
  LAUGH
  CONFUSED
  HEART
  HOORAY
  ROCKET
  EYES
}

enum PackageVisibility {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum PackageType {
  NPM
  MAVEN
  RUBYGEMS
  DOCKER
  NUGET
  PYPI
  CARGO
  COMPOSER
}

enum BranchProtectionLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum WebhookContentType {
  JSON
  FORM
}

enum WorkflowStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  WAITING
}

enum WorkflowConclusion {
  SUCCESS
  FAILURE
  CANCELLED
  SKIPPED
  TIMED_OUT
  ACTION_REQUIRED
  NEUTRAL
}

enum TokenType {
  BASIC
  ADVANCED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  RESTORE
  ARCHIVE
  UNARCHIVE
  ENABLE
  DISABLE
  GRANT
  REVOKE
  LOGIN
  LOGOUT
  RESET
  VERIFY
  INVITE
  ACCEPT
  REJECT
  TRANSFER
  FORK
  MERGE
  SYNC
  DEPLOY
  ROLLBACK
  CUSTOM
}

enum AuditCategory {
  USER
  REPOSITORY
  ORGANIZATION
  TEAM
  MEMBER
  PERMISSION
  TOKEN
  WEBHOOK
  SECURITY
  AUTHENTICATION
  INTEGRATION
  BILLING
  SETTINGS
  CONTENT
  OTHER
}

enum StatsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TrendingPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

enum TrendingType {
  USER
  ORGANIZATION
  REPOSITORY
}

enum SearchRefinementType {
  QUERY_MODIFICATION
  FILTER_ADDED
  FILTER_REMOVED
  SORT_CHANGED
  PAGINATION
  SUGGESTION_APPLIED
  SPELL_CORRECTION
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  READONLY
  BANNED
}
